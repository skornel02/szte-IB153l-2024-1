@page
@using System.Globalization
@using Backend.Extensions
@model Backend.Pages.DigitalSalesPage.IndexModel
@{
    ViewData["Title"] = "Pending Orders";
}

<h1>Pending Orders</h1>

@if (Model.Orders.Count == 0)
{
    <span class="text-danger">There is no order right now that waiting for acceptance!</span>
}
else
{
    <table class="table col-12 col-sm-6 col-md-4 col-lg-3">
        <thead>
            <tr>
                <th class="d-none d-md-table-cell">Id</th>
                <th>Status</th>
                <th>Total Price</th>
                <th>Ordered Products</th>
                <th>Accept/Reject</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var order in Model.Orders)
            {
                var buttonDisabled = false;
                void OrderCanBeAccepted()
                {
                    foreach (var item in order.OrderItems)
                    {
                        if (item.Quantity > item.Product.Stock)
                        {
                            buttonDisabled = true;
                            break;
                        }
                    }
                }

                OrderCanBeAccepted();

                <tr>
                    <td class="d-none d-md-flex flex-column align-content-center justify-items-center barcode-cell">
                        <img id="barcode-container-@order.Id" src="" class="barcode"/>
                        <span>@order.Id</span>
                    </td>
                    <td>@order.Status.GetDisplayName() </td>
                    <td>@String.Format(new CultureInfo("fr-FR"), "{0:C}", order.TotalPrice)</td>
                    <td>
                        <ul style="list-style-type: none; padding: 0;">

                            @foreach (var item in order.OrderItems)
                            {
                                var inStock = item.Product.Stock - item.Product.Reserved;
                                <li>@item.Product.Name: @item.Quantity  |  in stock: @inStock |</li>
                            }

                        </ul>
                    </td>
                    <td>
                        <div class="d-flex flex-row flex-md-row align-items-md-center">
                            <form method="post">
                                <div class="mb-2 gap-2 d-inline-flex">
                                    <input type="submit" class="btn btn-sm btn-success" asp-page-handler="Accept" value="Accept" disabled="@buttonDisabled" />
                                    </div>
                                <div class="mb-2 gap-2 d-inline-flex">
                                    <input type="submit" class="btn btn-sm btn-danger" asp-page-handler="Reject" value="Reject" />
                                </div>
                                <div class="input-group ">
                                    <input type="hidden" name="id" value="@order.Id" />
                                </div>
                            </form>
                        </div>
                        <div>
                            @if (buttonDisabled)
                            {
                                <span class="text-danger">There is not enough products in the stock!</span>
                            }
                        </div>
                    </td>
                </tr>

            }
        </tbody>
    </table>
}

@section Scripts {
    <script>var exports = {"__esModule": true};</script>
    <script src="https://cdn.jsdelivr.net/npm/barcode-tool@1.1.1/dist/cjs/index.js">
    </script>

    <script>
        const onLoad = async () => {
            const barcodeCells = document.querySelectorAll('.barcode-cell');

            for (const cell of barcodeCells) {
                const orderIdCell = cell.querySelector('span');
                const orderId = orderIdCell.innerText;
                const barcodeContainer = cell.querySelector('img');
                const barcodeContainerId = barcodeContainer.id;

                const payload = { elementId: barcodeContainerId, value: orderId };
                const options = {};

                generateBarcode(payload, options);

                orderIdCell.remove();
            }
        }

        $(document).ready(onLoad);
    </script>
}


